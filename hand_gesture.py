{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b428d10-8de2-47e5-807f-5cd797348a5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import mediapipe as mp\n",
    "\n",
    "mp_hands = mp.solutions.hands\n",
    "hands = mp_hands.Hands(static_image_mode=False,\n",
    "                       max_num_hands=1,\n",
    "                       min_detection_confidence=0.7,\n",
    "                       min_tracking_confidence=0.7)\n",
    "mp_draw = mp.solutions.drawing_utils\n",
    "\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "def finger_is_up(landmarks, tip_id):\n",
    "    return landmarks[tip_id].y < landmarks[tip_id - 2].y\n",
    "\n",
    "def detect_gesture(landmarks):\n",
    "    thumb_tip = landmarks[4]\n",
    "    index_tip = landmarks[8]\n",
    "    middle_tip = landmarks[12]\n",
    "    ring_tip = landmarks[16]\n",
    "    pinky_tip = landmarks[20]\n",
    "\n",
    "    index_pip = landmarks[6]\n",
    "    middle_pip = landmarks[10]\n",
    "    ring_pip = landmarks[14]\n",
    "    pinky_pip = landmarks[18]\n",
    "    thumb_ip = landmarks[3]\n",
    "\n",
    "    thumb_up = thumb_tip.y < thumb_ip.y\n",
    "    index_up = index_tip.y < index_pip.y\n",
    "    middle_up = middle_tip.y < middle_pip.y\n",
    "    ring_up = ring_tip.y < ring_pip.y\n",
    "    pinky_up = pinky_tip.y < pinky_pip.y\n",
    "\n",
    "    if thumb_up and not index_up and not middle_up and not ring_up and not pinky_up:\n",
    "        return \"Thumbs Up\"\n",
    "    elif index_up and middle_up and not ring_up and not pinky_up:\n",
    "        return \"Peace\"\n",
    "    else:\n",
    "        return \"Unknown\"\n",
    "\n",
    "while True:\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    frame = cv2.flip(frame, 1)\n",
    "    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "    result = hands.process(rgb_frame)\n",
    "\n",
    "    gesture = \"No Hand\"\n",
    "\n",
    "    if result.multi_hand_landmarks:\n",
    "        for hand_landmarks in result.multi_hand_landmarks:\n",
    "            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)\n",
    "\n",
    "            landmarks = hand_landmarks.landmark\n",
    "            gesture = detect_gesture(landmarks)\n",
    "\n",
    "    cv2.putText(frame, f'Gesture: {gesture}', (10, 30),\n",
    "                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)\n",
    "\n",
    "    cv2.imshow(\"Hand Gesture Recognition\", frame)\n",
    "\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66a965c2-2b65-41d9-8123-be1857751821",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
